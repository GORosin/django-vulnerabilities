--- 
CVE: CVE-2012-4520
CWE: 644
CWE_instructions: |
    Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
    entry that describes your vulnerability. We recommend going to
    https://cwe.mitre.org/data/definitions/699.html for the Software Development
    view of the vulnerabilities. We also recommend the tool
    http://www.cwevis.org/viz to help see how the classifications work.
    
    If you have anything to note about why you classified it this way, write
    something in CWE_note. This field is optional.
    
    Just the number here is fine. No need for name or CWE prefix. If more than one
    apply here, then choose the best one and mention the others in CWE_note.
CWE_note: "the vulnerability was within the header allowing malicious input."
announced_date: 2012-10-17
announced_instructions: |
    Was there a date that this vulnerability was announced to the world? You can
    find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
    source for this is Chrome's Stable Release Channel
    (https://chromereleases.googleblog.com/).
    Please enter your date in YYYY-MM-DD format.
autodiscoverable: 
  answer: true
  answer_note: "Password reset poisoning is the vulnerability. This can be discovered automatically using AcuMonitor. https://dzone.com/articles/what-is-a-host-header-attack\n"
  instructions: |
      Is it plausible that a fully automated tool could have discovered
      this? These are tools that require little knowledge of the domain,
       e.g. automatic static analysis, compiler warnings, fuzzers.
      
      Examples for true answers: SQL injection, XSS, buffer overflow
      
      Examples for false: RFC violations, permissions issues, anything
      that requires the tool to be "aware" of the project's
      domain-specific requirements.
      
      The answer field should be boolean. In answer_note, please explain
      why you come to that conclusion.
bounty: 
  amt:
  announced:
  url:
bounty_instructions: |
    If you came across any indications that a bounty was paid out for this
    vulnerability, fill it out here. Or correct it if the information already here
    was wrong. Otherwise, leave it blank.
bugs: []
curated: true
curated_instructions: |
    If you are manually editing this file, then you are "curating" it. Set the
    entry below to "true" as soon as you start. This will enable additional
    integrity checks on this file to make sure you fill everything out properly.
    If you are a student, we cannot accept your work as finished unless curated is
    set to true.
description: "The function get_host could be exploited to generate arbitrary URLs. An attacker could put malicious username and password values in the Host header that enabled this."
description_instructions: |
    You can get an initial description from the CVE entry on cve.mitre.org. These
    descriptions are a fine start, but they can be kind of jargony.
    
    Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
    read to anyone with some programming experience. We can always pull up the NVD
    description later to get more technical.
    
    Try to still be specific in your description, but remove project-specific
    stuff. Remove references to versions, specific filenames, and other jargon
    that outsiders to this project would not understand. Technology like "regular
    expressions" is fine, and security phrases like "invalid write" are fine to
    keep too.
    
    Your target audience is people just like you before you took any course in
    security
discovered: 
  answer: "The vulnerability was discovered by James Kettle. There is no explanation for how it was found. https://www.djangoproject.com/weblog/2012/oct/17/security/\n"
  automated: false
  contest: false
  developer: true
  question: |
      How was this vulnerability discovered?
      
      Go to the bug report and read the conversation to find out how this was
      originally found. Answer in longform below in "answer", fill in the date in
      YYYY-MM-DD, and then determine if the vulnerability was found by a Google
      employee (you can tell from their email address). If it's clear that the
      vulenrability was discovered by a contest, fill in the name there.
      
      The automated, contest, and developer flags can be true, false, or nil.
      
      If there is no evidence as to how this vulnerability was found, then please explain where you looked.
fixes: 
  - 
    commit: b45c377f8f488955e0c7069cad3f3dd21910b071
    note: ~
  - 
    commit: 92d3430f12171f16f566c9050c40feefb830a4a3
    note: ~
fixes_vcc_instructions: |
    Please put the commit hash in "commit" below (see my example in
    CVE-2011-3092.yml). Fixes and VCCs follow the same format.
i18n: 
  answer: false
  note: "the vulnerability impacts displayed URL which has no variation depending on user location.\n"
  question: |
      Was the feature impacted by this vulnerability about internationalization
      (i18n)? An internationalization feature is one that enables people from all
      over the world to use the system. This includes translations, locales,
      typography, unicode, or various other features.
      
      Answer should be boolean. Write a note about how you came to the conclusions
      you did.
interesting_commits: 
  commits: 
    - 
      commit: 0714b0f39033a51e447bc1b3b03ffee6f9228105
      note: "This commit affects parsing of values in HTTP Header. This is not explicitly related to passwords but it could maybe have an effect on the way an entered value was interpreted by the Header, which is where the vulnerability was.\n"
    - 
      commit: ~
      note: ~
  question: |
      Are there any interesting commits between your VCC(s) and fix(es)?
      
      Write a brief (under 100 words) description of why you think this commit was
      interesting in light of the lessons learned from this vulnerability. Any
      emerging themes?
ipc: 
  answer: true
  note: "messages inputted into password value can pass to files like configuration.\n"
  question: |
      Did the feature that this vulnerability affected use inter-process
      communication? IPC includes OS signals, pipes, stdin/stdout, message
      passing, and clipboard. Writing to files that another program in this
      software system reads is another form of IPC.
      
      Answer should be boolean.
lessons: 
  complex_inputs: 
    applies: ~
    note: ~
  defense_in_depth: 
    applies: ~
    note: ~
  distrust_input: 
    applies: true
    note: "the vulnerability is located in an untrustworthy header.\n"
  environment_variables: 
    applies: ~
    note: ~
  frameworks_are_optional: 
    applies: ~
    note: ~
  least_privilege: 
    applies: ~
    note: ~
  native_wrappers: 
    applies: ~
    note: ~
  question: |
      Are there any common lessons we have learned from class that apply to this
      vulnerability? In other words, could this vulnerability serve as an example
      of one of those lessons?
      
      Leave "applies" blank or put false if you did not see that lesson (you do
      not need to put a reason). Put "true" if you feel the lesson applies and put
      a quick explanation of how it applies.
      
      Don't feel the need to claim that ALL of these apply, but it's pretty likely
      that one or two of them apply.
      
      If you think of another lesson we covered in class that applies here, feel
      free to give it a small name and add one in the same format as these.
  secure_by_default: 
    applies: ~
    note: ~
  security_by_obscurity: 
    applies: ~
    note: ~
  serial_killer: 
    applies: ~
    note: ~
  yagni: 
    applies: ~
    note: ~
mistakes: 
  answer: |
      I think it's a coding mistake. Looking at the commit that fixed this problem, the issue
      stemmed from lack of sanitization. Specifically, a URL containing @ allowed a colon to
      be interpreted as part of the input for login. The committed fix addressed this directly.
  question: |
      In your opinion, after all of this research, what mistakes were made that
      led to this vulnerability? Coding mistakes? Design mistakes?
      Maintainability? Requirements? Miscommunications?
      
      Look at the CWE entry for this vulnerability and examine the mitigations
      they have written there. Are they doing those? Does the fix look proper?
      
      Use those questions to inspire your answer. Don't feel obligated to answer
      every one. Write a thoughtful entry here that those ing the software
      engineering industry would find interesting.
nickname: ~
nickname_instructions: |
    A catchy name for this vulnerability that would draw attention it. If the
    report mentions a nickname, use that. Must be under 30 characters.
    Optional.
published_date: 2012-10-18
published_instructions: |
    Is there a published fix or patch date for this vulnerability?
    Please enter your date in YYYY-MM-DD format.
repo: ~
reported_date: 2012-10-10
reported_instructions: |
    What date was the vulnerability reported to the security team? Look at the
    security bulletins and bug reports. It is not necessarily the same day that the
    CVE was created.  Leave blank if no date is given.
    Please enter your date in YYYY-MM-DD format.
reviews: []
specification: 
  answer: false
  answer_note: |
   I didn't find any relevant specifications.
  instructions: |
      Is there mention of a violation of a specification? For example,
      an RFC specification, a protocol specification, or a requirements
      specification.
      
      Be sure to check all artifacts for this: bug report, security
      advisory, commit message, etc.
      
      The answer field should be boolean. In answer_note, please explain
      why you come to that conclusion.
subsystem: 
  answer: "found in the directory of the fix commit: \"django/contrib/auth/\". a few files were modified to address password reset poisoning. b45c377f8f488955e0c7069cad3f3dd21910b071\n"
  name: authentication
  question: |
      What subsystems was the mistake in?
      
      Most systems don't have a formal list of their subsystems, but you can
      usually infer them from path names, bug report tags, or other key words
      used. A single source file is not what we mean by a subsystem. In Django,
      the "Component" field on the bug report is useful. But there may be other
      subsystems involved.
      
      Your subsystem name(s) should not have any dots or slashes in them. Only
      alphanumerics, whitespace, _, - and @.Feel free to add multiple using a YAML
      array.
      
      In the answer field, explain where you saw these words.
      In the name field, a subsystem name (or an array of names)
      
      e.g. clipboard, model, view, controller, mod_dav, ui, authentication
unit_tested: 
  code: false
  code_answer: "The surrounding subsystem does not have any related test cases regarding this bug.\n"
  fix: true
  fix_answer: |
      the commit that fixed the issue implemented a unit test called test_poisoned_header(self)
      which checks password reset outside of get_host() being invoked.
  question: |
      Were automated unit tests involved in this vulnerability?
      Was the original code unit tested, or not unit tested? Did the fix involve
      improving the automated tests?
      
      For code: and fix: - your answer should be boolean.
      
      For the code_answer below, look not only at the fix but the surrounding
      code near the fix in related directories and determine if and was there were unit tests involved for this subsystem. The code
      
      For the fix_answer below, check if the fix for the vulnerability involves
      adding or improving an automated test to ensure this doesn't happen again.
upvotes: ~
upvotes_instructions: |
    For the first round, ignore this upvotes number.
    
    For the second round of reviewing, you will be giving a certain amount of
    upvotes to each vulnerability you see. Your peers will tell you how
    interesting they think this vulnerability is, and you'll add that to the
    upvotes score on your branch.
vccs: 
  - 
    commit: bb00b2839980145984c487410fc65fbc0c94be3d
    note: "This VCC was discovered automatically via archeogit."
  - 
    commit: 3e6f4674e2fc190c2116d77066d18f42bd3bcbae
    note: "This VCC was discovered automatically via archeogit."
  - 
    commit: e91deca7798139fa85a17e949aafd380af8fce13
    note: "This VCC was discovered automatically via archeogit."
  - 
    commit: 4084bc735437e7a2e2a09cff469788e036080203
    note: "This VCC was discovered automatically via archeogit."
  - 
    commit: fcd837cd0f9b2c706bc49af509628778d442bb3f
    note: "This VCC was discovered automatically via archeogit."
  - 
    commit: afd040d4d3a06fe92e3080870b2ff2095ce86a75
    note: "This VCC was discovered automatically via archeogit."
  - 
    commit: 19b9211a3b5424e7908a288c5008bf972cc472f4
    note: "This VCC was discovered automatically via archeogit."
  - 
    commit: e74edb4d53b089ec57ec4830eeba98607283a092
    note: "This VCC was discovered automatically via archeogit."
  - 
    commit: fc6649092aae5667ee6ed9b16ed81ebbe41a7bf4
    note: "This VCC was discovered automatically via archeogit."
  - 
    commit: 4b610f42d36a39cd975122ab46f85323844c2c72
    note: "This VCC was discovered automatically via archeogit."
  - 
    commit: 7a60b411305bc363ec51a096b108fa909c1b352b
    note: "This VCC was discovered automatically via archeogit."
  - 
    commit: 5df31c0164e9477a3ebb6b1bbde8604e06fbefd4
    note: "This VCC was discovered automatically via archeogit."
yaml_instructions: |
    ===YAML Primer===
    This is a dictionary data structure, akin to JSON.
    Everything before a colon is a key, and the values here are usually strings
    For one-line strings, you can just use quotes after the colon
    For multi-line strings, as we do for our instructions, you put a | and then
    indent by two spaces
    
    For readability, we hard-wrap multi-line strings at 80 characters. This is
    not absolutely required, but appreciated.